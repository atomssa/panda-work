The following things were done to get a working compile

* Still refuse to compile boost and cmake
** they are available on system (rejected on basis of being too new)
** For boost, may reevaluate, because of lmd issue mentioned below


* For externals use gcc from homebrew instead of built in clang
** Intention was to avoid the many mac specific build failures
** Worked mostly smoothly.
** One still needs to remove rdynamic flag from pluto compilation
*** even with gcc from homebrew, rdynamic is not available on mac
*** add the following to install_pluto.sh:
    mysed  '-rdynamic' '' Makefile
** For root one has to modify the rootconfig.sh file located in tools/rootconfig.sh
*** Namely --with-cc=gcc --with-cxx=g++ --with-ld=g++ has to be added

* Had to roll back xquartz to version 2.7.4
** 2.7.6 has freetype version 1.5.1 which breaks root build with the root version provided in pandaroot
** This causes errors of the type: include/TTF.h:51:4: error: 'FT_Glyph' does not name a type
** Lots of exploration to fix it amicably but nothing worked
** One lead was to remove ftgl (because its needed in some useless 3d graph library)
*** tried a patch suggested in https://github.com/root-mirror/root/commit/446a11828dcf577efd15d9057703c5bd099dd148
*** also tried to remove from rootconfig.sh --enalble-builtin-ftgl which didn't work either


* Tried without success to use brew gcc in panda-root
** Main problem is with the use of -fPIE option to compile fortran that is externally linked in c++
*** the visible culprit was inside the DPM class where the main.cc file calls fortran funcs
*** PIE option allows adding executable in random adresses, but couldn't tell the linker to allow that
*** consult http://stackoverflow.com/questions/2463150/fpie-position-independent-executable-option-gcc-ld

* lmd class calling ptree from boost caused compile issues
** hard to solve, so commented out offending code
** source is in : md/LmdFit/LumiImpl/data/PndLmdDataFacade.cxx

* Panda root classes that link to pluto wont compile
** This is because of the issue of friend functions with default arguments
** Culprit is generators/pluto/src/PStaticData.h
** install_pluto.sh can be modified to apply the patch by adding in the osx section :
     mysed  'friend void listModes(int id=-1);' 'friend void listModes(int id);' src/PStaticData.h
     mysed  'friend void listParticle(int id=-1);' 'friend void listParticle(int id);' src/PStaticData.h

* Obscure error: inline functions are hidden for some reason
   (invisible = not found when used as dynamically shared library)
** Culprit is FairMultiLinkedData::AddLinks and FairMultiLinkedDataSetLink functions
** The code comples well (FairMultiLinkData is part of libBase )
** At runtime, when libraries try to dynamically link against libBase, code crashes at run time
** The reason seems that the two funcs (AddLink and SetLink) are inline
** some exploration says there are compiler flags to hide/unhide symbols from dynamic linking
** See refs at
https://developer.apple.com/library/mac/documentation/DeveloperTools/Conceptual/CppRuntimeEnv/Articles/SymbolVisibility.html
http://stackoverflow.com/questions/3570355/c-fvisibility-hidden-fvisibility-inlines-hidden
https://www.google.com/webhp?sourceid=chrome-instant&ion=1&espv=2&ie=UTF-8#q=osx+c%2B%2B+dynamic+load+inline+function+failure
https://gcc.gnu.org/wiki/Visibility
** Could be a specificity of OSX that hides inlines by default unless explicity told not to
** Temporary solution is to remove inline modifier from function definitions
** __attribute((visibility(hidden)))__ doesn't seem to work with inline


* undefined symbols for architecture x86_64 error
** Solution couldn't be found, so offending modules were commeted in CMakeLists.txt
** It is caused probably by the library module being compiled to target 32 bits and the client module targeting 64 bit


* TMath was using a deprecated function fininte(double) in OSX-9
** Only solution was to "patch" TMath.h at L503-504 by adding a special case for macosx with no additional condtion on arm that uses std::isfininte()

* Link time error with new versions of root (-stdlib=libc++ unrecognized option with gfortran):
  Linking Fortran shared library ../../../lib/libEvtGen.so
  gfortran: error: unrecognized command line option '-stdlib=libc++'
  make[2]: *** [lib/libEvtGen.0.0.0.so] Error 1
  make[1]: *** [pgenerators/EvtGen/EvtGen/CMakeFiles/EvtGen.dir/all] Error 2
  make[1]: *** Waiting for unfinished jobs....
  Linking CXX shared library ../lib/libFairDB.so
  [ 35%] Built target FairDB
  make: *** [all] Error 2
** Cause : root-config --glibs adds the option which is then used as input for fortran linking which doesn't like the option
** Solution: suppress auxilliary lib in the output from root-config using --noauxlibs in cmake/modlues/FindROOT.cake
   Execute_Process(COMMAND ${ROOT_CONFIG_EXECUTABLE} --noauxlibs --glibs

* Stupid constructor change errors TVector3 pos = (0,0,0); used implicit conversion no longer available with recent versions of root
** Solution: Just replace (0,0,0) with TVector3(0,0,0)
*** Culprits: gem/PndGemTrackFinderOnHits.cxx(L455) and gem/PndGemTrackFinderOnHitsTB.cxx(L374)
*** Culprits: global/PndMvdTrackFinderOnHits.cxx(L418) smells like copy paste error
* MasterToLocalShortId((0.,0.,0.), barId) assumes implicit conversion of (0,0,0) to TVector3 no longer allowed
** Solution: MasterToLocalShortId(TVector3(0.,0.,0.), barId)
*** Culprits: drc/PndDrc.cxx(L978) and drc/PndDrcDigiTask.cxx(L194)
* Float_t dec  = d_cms.Vect().Angle(c->P()); This is a bug. c->P() is magnitude of 3vector (double) used to be converted implicitely to TVector3
* Definitely not what was intended. Probably c->P3() which returns a TVector3 was what was meant. Maybe not problematic since it's just QA code
** Solution: Replace c->P() by c->P3()
*** culprits: PndRhoTupleQA.cxx(L619,L665)
* emc/PndEmcClusterMoments.cxx -> Many many problems at many levels, too tiring to correct
** Solution: Just copy over the file from trunk which has been fixed and replace the old one scrut14 version

* Google Test Framework verion 1.6 doesn't compile on Mavericks (some problem with missing tr1/tuple header)
** (1.7 works but 1.7 is available only as .zip file download. So need to modify the unpacking line in scripts/install_gtest.sh to use unzip instead of untar)

* ml-gsoapclient link problem (missing gcc library) on builtin gcc (aka clang).
** There is a check on clang to remove -lgcc, but this ignores the fact that gcc in osx10.9+ means clang
** Therofre add condition $platform = $macosx in the conditional to remove -lgcc
    if [ "$platform" = "$macosx" ];
    then
      mysed '-lgcc' '' src/Makefile
    fi
*** For some strange reason, the condition "$platform" = "$macosx" was not being satisfied. Remove the condtion if toroulbe

* Notes on built-in GCC (dummy-link to clang nowadays) vs GCC.4.9 from homebrew
** The main reason GCC.4.9 was even originally needed was absense of gfortran from OSX's built-in GCC
** When built with GCC.4.9, one often comes across error to the effect that some-symbol-missing-for-arch-x86_64
** These errors do not occur when linked to library is compiled with built-in gcc
*** Two packages against which this error occured when compiling pandaroot were HepMC and root, in both cases solved by recompiling using builtin gcc
